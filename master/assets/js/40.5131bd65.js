(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{399:function(n,t,e){"use strict";e.r(t);var o=e(7),a=Object(o.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"logarithmic-scale"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#logarithmic-scale"}},[this._v("#")]),this._v(" Logarithmic Scale")]),this._v(" "),n("p",[this._v("Zooming is performed by clicking and selecting an area over the chart with the mouse. Pan is activated by keeping "),n("code",[this._v("ctrl")]),this._v(" pressed.")]),this._v(" "),n("chart-editor",{attrs:{code:"// <block:data:2>\nconst data = {\n  datasets: [{\n    label: 'V(node2)',\n    borderColor: Utils.randomColor(0.4),\n    backgroundColor: Utils.randomColor(0.1),\n    pointBorderColor: Utils.randomColor(0.7),\n    pointBackgroundColor: Utils.randomColor(0.5),\n    pointBorderWidth: 1,\n    data: [{\n      x: 1,\n      y: -1.711e-2,\n    }, {\n      x: 1.26,\n      y: -2.708e-2,\n    }, {\n      x: 1.58,\n      y: -4.285e-2,\n    }, {\n      x: 2.0,\n      y: -6.772e-2,\n    }, {\n      x: 2.51,\n      y: -1.068e-1,\n    }, {\n      x: 3.16,\n      y: -1.681e-1,\n    }, {\n      x: 3.98,\n      y: -2.635e-1,\n    }, {\n      x: 5.01,\n      y: -4.106e-1,\n    }, {\n      x: 6.31,\n      y: -6.339e-1,\n    }, {\n      x: 7.94,\n      y: -9.659e-1,\n    }, {\n      x: 10.00,\n      y: -1.445,\n    }, {\n      x: 12.6,\n      y: -2.110,\n    }, {\n      x: 15.8,\n      y: -2.992,\n    }, {\n      x: 20.0,\n      y: -4.102,\n    }, {\n      x: 25.1,\n      y: -5.429,\n    }, {\n      x: 31.6,\n      y: -6.944,\n    }, {\n      x: 39.8,\n      y: -8.607,\n    }, {\n      x: 50.1,\n      y: -1.038e1,\n    }, {\n      x: 63.1,\n      y: -1.223e1,\n    }, {\n      x: 79.4,\n      y: -1.413e1,\n    }, {\n      x: 100.00,\n      y: -1.607e1,\n    }, {\n      x: 126,\n      y: -1.803e1,\n    }, {\n      x: 158,\n      y: -2e1,\n    }, {\n      x: 200,\n      y: -2.199e1,\n    }, {\n      x: 251,\n      y: -2.398e1,\n    }, {\n      x: 316,\n      y: -2.597e1,\n    }, {\n      x: 398,\n      y: -2.797e1,\n    }, {\n      x: 501,\n      y: -2.996e1,\n    }, {\n      x: 631,\n      y: -3.196e1,\n    }, {\n      x: 794,\n      y: -3.396e1,\n    }, {\n      x: 1000,\n      y: -3.596e1\n    }]\n  }]\n}\n// </block:data>\n\n// <block:scales:1>\nconst scales = {\n  x: {\n    type: 'logarithmic',\n    ticks: {\n      callback: function(tick) {\n        const remain = tick / (Math.pow(10, Math.floor(Math.log10(tick))))\n        if (remain === 1 || remain === 2 || remain === 5) {\n          return tick.toString() + 'Hz'\n        }\n        return ''\n      },\n      maxRotation: 0\n    },\n    title: {\n      display: true,\n      text: 'Frequency',\n    },\n  }\n}\n// </block:scales>\n\n// <block:config:0>\nconst config = {\n  type: 'scatter',\n  data: data,\n  options: {\n    scales: scales,\n    plugins: {\n      zoom: {\n        pan: {\n          enabled: true,\n          mode: 'xy',\n          modifierKey: 'ctrl',\n        },\n        zoom: {\n          drag: {\n            enabled: true\n          },\n          mode: 'xy',\n        },\n      }\n    },\n  }\n}\n// </block:config>\n\nconst actions = [\n  {\n    name: 'Reset zoom',\n    handler(chart) {\n      chart.resetZoom()\n    }\n  }\n]\n\nmodule.exports = {\n  actions,\n  config,\n}\n"}})],1)}),[],!1,null,null,null);t.default=a.exports}}]);