(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{405:function(n,o,t){"use strict";t.r(o);var a=t(7),s=Object(a.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"pan-toggle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pan-toggle"}},[this._v("#")]),this._v(" Pan Toggle")]),this._v(" "),n("p",[this._v("In this example pan is initially disabled.")]),this._v(" "),n("chart-editor",{attrs:{code:"// <block:data:1>\nconst NUMBER_CFG = {count: 20, min: -100, max: 100}\nconst data = {\n  datasets: [{\n    label: 'My First dataset',\n    borderColor: Utils.randomColor(0.4),\n    backgroundColor: Utils.randomColor(0.1),\n    pointBorderColor: Utils.randomColor(0.7),\n    pointBackgroundColor: Utils.randomColor(0.5),\n    pointBorderWidth: 1,\n    data: Utils.points(NUMBER_CFG),\n  }, {\n    label: 'My Second dataset',\n    borderColor: Utils.randomColor(0.4),\n    backgroundColor: Utils.randomColor(0.1),\n    pointBorderColor: Utils.randomColor(0.7),\n    pointBackgroundColor: Utils.randomColor(0.5),\n    pointBorderWidth: 1,\n    data: Utils.points(NUMBER_CFG),\n  }]\n}\n// </block:data>\n\n// <block:scales:2>\nconst scaleOpts = {\n  grid: {\n    borderColor: Utils.randomColor(1),\n    color: 'rgba( 0, 0, 0, 0.1)',\n  },\n  title: {\n    display: true,\n    text: (ctx) => ctx.scale.axis + ' axis',\n  }\n}\nconst scales = {\n  x: {\n    position: 'top',\n  },\n  y: {\n    position: 'right',\n  },\n}\nObject.keys(scales).forEach(scale => Object.assign(scales[scale], scaleOpts))\n// </block:scales>\n\n// <block:zoom:0>\nconst zoomOptions = {\n  limits: {\n    x: {min: -200, max: 200, minRange: 50},\n    y: {min: -200, max: 200, minRange: 50}\n  },\n  pan: {\n    enabled: false,\n    mode: 'xy',\n  },\n  zoom: {\n    wheel: {\n      enabled: false,\n    },\n    pinch: {\n      enabled: true\n    },\n  }\n}\n// </block:zoom>\n\n// <block:config:1>\nconst config = {\n  type: 'scatter',\n  data: data,\n  options: {\n    scales: scales,\n    plugins: {\n      zoom: zoomOptions,\n    },\n  },\n}\n// </block:config>\n\nconst actions = [\n  {\n    name: 'Toggle pan',\n    handler(chart) {\n      chart.options.plugins.zoom.pan.enabled = !chart.options.plugins.zoom.pan.enabled\n      chart.update()\n    }\n  },\n  {\n    name: 'Reset zoom',\n    handler(chart) {\n      chart.resetZoom('zoom')\n    }\n  }\n]\n\nmodule.exports = {\n  actions,\n  config,\n}\n"}})],1)}),[],!1,null,null,null);o.default=s.exports}}]);