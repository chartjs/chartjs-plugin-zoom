(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{395:function(n,t,o){"use strict";o.r(t);var a=o(7),s=Object(a.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("h1",{attrs:{id:"category-scale"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#category-scale"}},[this._v("#")]),this._v(" Category Scale")]),this._v(" "),n("p",[this._v("Zooming is performed by clicking and selecting an area over the chart with the mouse. Pan is activated by keeping "),n("code",[this._v("ctrl")]),this._v(" pressed.")]),this._v(" "),n("chart-editor",{attrs:{code:"// <block:data:1>\nconst DATA_COUNT = 20\nconst NUMBER_CFG = {count: DATA_COUNT, min: -100, max: 100}\nconst data = {\n  labels: Utils.months({count: DATA_COUNT}),\n  datasets: [{\n    label: 'Dataset 1',\n    borderColor: Utils.randomColor(0.7),\n    backgroundColor: Utils.randomColor(0.5),\n    data: Utils.numbers(NUMBER_CFG),\n  }, {\n    label: 'Dataset 2',\n    borderColor: Utils.randomColor(0.7),\n    backgroundColor: Utils.randomColor(0.5),\n    data: Utils.numbers(NUMBER_CFG),\n  }, {\n    label: 'Dataset 3',\n    borderColor: Utils.randomColor(0.7),\n    backgroundColor: Utils.randomColor(0.5),\n    data: Utils.numbers(NUMBER_CFG),\n  }]\n}\n// </block:data>\n\n// <block:scales:2>\nconst scaleOpts = {\n  grid: {\n    borderColor: Utils.randomColor(1),\n    color: 'rgba( 0, 0, 0, 0.1)',\n  },\n  title: {\n    display: true,\n    text: (ctx) => ctx.scale.axis + ' axis',\n  }\n}\nconst scales = {\n  x: {\n    type: 'category',\n  },\n  y: {\n    type: 'linear',\n    ticks: {\n      callback: (val, index, ticks) => index === 0 || index === ticks.length - 1 ? null : val,\n    },\n  },\n}\nObject.keys(scales).forEach(scale => Object.assign(scales[scale], scaleOpts))\n// </block:scales>\n\n// <block:config:0>\nconst config = {\n  type: 'bar',\n  data: data,\n  options: {\n    scales: scales,\n    plugins: {\n      tooltip: false,\n      zoom: {\n        pan: {\n          enabled: true,\n          mode: 'x',\n          modifierKey: 'ctrl',\n        },\n        zoom: {\n          drag: {\n            enabled: true\n          },\n          mode: 'x',\n        },\n      }\n    },\n  }\n}\n// </block:config>\n\nconst actions = [\n  {\n    name: 'Reset zoom',\n    handler(chart) {\n      chart.resetZoom()\n    }\n  }\n]\n\nmodule.exports = {\n  actions,\n  config,\n}\n"}})],1)}),[],!1,null,null,null);t.default=s.exports}}]);